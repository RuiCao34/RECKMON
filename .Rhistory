devtools::document()
devtools::load_all()
pkgload::dev_help('main_RECKMON')
?main_RECKMON
devtools::load_all()
?main_RECKMON
devtools::load_all()
?main_RECKMON
devtools::load_all()
?main_RECKMON
devtools::load_all()
?main_RECKMON
devtools::load_all()
?main_RECKMON
devtools::document()
devtools::document()
devtools::load_all()
?main_RECKMON
devtools::document()
devtools::load_all()
?main_RECKMON
devtools::document()
devtools::load_all()
?main_RECKMON
devtools::document()
devtools::load_all()
?main_RECKMON
devtools::document()
devtools::load_all()
?main_RECKMON
devtools::document()
devtools::load_all()
?main_RECKMON
devtools::document()
devtools::load_all()
?main_RECKMON
devtools::document()
devtools::load_all()
?main_RECKMON
devtools::document()
devtools::load_all()
?main_RECKMON
roxygen2::roxygenise()
?roxygenise
?roxygenise
roxygen2::roxygenise()
devtools::load_all()
?main_RECKMON
devtools::document()
devtools::load_all()
?main_RECKMON
?glmnet
.libPaths()
?glmnet
devtools::document()
devtools::document()
devtools::load_all()
?main_RECKMON
ï¼Ÿbmi3
?bmi3
devtools::document()
devtools::load_all()
?main_RECKMON
?add
devtools::document()
devtools::load_all()
?main_RECKMON
devtools::build_manual
devtools::build_manual()
rlang::last_trace()
devtools::install_github("gqi/TWiST")
?twist_association
library("TWiST")
?twist_association
devtools::document()
devtools::load_all()
?main_RECKMON
set.seed(123)
n <- 100
p <- 10
x_data <- matrix(rnorm(n * p), nrow = n, ncol = p)
colnames(x_data) <- paste0("V", 1:p)
# Create a response variable y
y_data <- 2 * x_data[, 1] - 1.5 * x_data[, 2] +      # Linear effects
x_data[, 3] * x_data[, 4] +               # Interaction effect
sin(pi * x_data[, 5]) +                   # Non-linear effect
rnorm(n, 0, 0.5)                          # Noise (CORRECTED: using 'n')
# Run the model with parameters suitable for a quick example
model_fit <- main_RECKMON(                          # CORRECTED: Function name
x = x_data,
y = y_data,
poly_features = 5,
step_gaussian = 1,
cv = 3, # Use 3 folds for a quick example
mc.cores = 1
)
# Run the model with parameters suitable for a quick example
model_fit <- main_RECKMON(                          # CORRECTED: Function name
x = x_data,
y = y_data,
step_gaussian = 1,
cv = 3, # Use 3 folds for a quick example
mc.cores = 1
)
x=x_data
floor(nrow(x)/log(ncol(x)))
devtools::document()
devtools::load_all()
?main_RECKMON
set.seed(123)
n <- 100
p <- 10
x_data <- matrix(rnorm(n * p), nrow = n, ncol = p)
colnames(x_data) <- paste0("V", 1:p)
# Create a response variable y
y_data <- 2 * x_data[, 1] - 1.5 * x_data[, 2] +      # Linear effects
x_data[, 3] * x_data[, 4] +               # Interaction effect
sin(pi * x_data[, 5]) +                   # Non-linear effect
rnorm(n, 0, 0.5)                          # Noise (CORRECTED: using 'n')
# Run the model with parameters suitable for a quick example
model_fit <- main_RECKMON(                          # CORRECTED: Function name
x = x_data,
y = y_data,
step_gaussian = 1,
cv = 3, # Use 3 folds for a quick example
mc.cores = 1
)
max(ncol(x), floor(nrow(x)/log(ncol(x))))
devtools::document()
devtools::load_all()
?main_RECKMON
set.seed(123)
n <- 100
p <- 10
x_data <- matrix(rnorm(n * p), nrow = n, ncol = p)
colnames(x_data) <- paste0("V", 1:p)
# Create a response variable y
y_data <- 2 * x_data[, 1] - 1.5 * x_data[, 2] +      # Linear effects
x_data[, 3] * x_data[, 4] +               # Interaction effect
sin(pi * x_data[, 5]) +                   # Non-linear effect
rnorm(n, 0, 0.5)                          # Noise (CORRECTED: using 'n')
# Run the model with parameters suitable for a quick example
model_fit <- main_RECKMON(                          # CORRECTED: Function name
x = x_data,
y = y_data,
step_gaussian = 1,
cv = 3, # Use 3 folds for a quick example
mc.cores = 1
)
print(model_fit)
print(model_fit$poly_feature)
# Run the model with parameters suitable for a quick example
model_fit <- main_RECKMON(                          # CORRECTED: Function name
x = x_data,
y = y_data,
poly_features = 5,
step_gaussian = 1,
cv = 3, # Use 3 folds for a quick example
mc.cores = 1
)
# View the selected features
cat("Selected interaction features:\n")
print(model_fit$poly_feature)
cat("Selected Gaussian kernel features:\n")
print(model_fit$gaussian_feature)
model_fit$gaussian_feature
str(model_fit)
devtools::document()
devtools::load_all()
?main_RECKMON
set.seed(123)
n <- 100
p <- 10
x_data <- matrix(rnorm(n * p), nrow = n, ncol = p)
colnames(x_data) <- paste0("V", 1:p)
# Create a response variable y
y_data <- 2 * x_data[, 1] - 1.5 * x_data[, 2] +      # Linear effects
x_data[, 3] * x_data[, 4] +               # Interaction effect
sin(pi * x_data[, 5]) +                   # Non-linear effect
rnorm(n, 0, 0.5)                          # Noise (CORRECTED: using 'n')
# Run the model with parameters suitable for a quick example
model_fit <- main_RECKMON(                          # CORRECTED: Function name
x = x_data,
y = y_data,
poly_features = 5,
step_gaussian = 1,
cv = 3, # Use 3 folds for a quick example
mc.cores = 1
)
devtools::document()
devtools::load_all()
?main_RECKMON
set.seed(123)
n <- 100
p <- 10
x_data <- matrix(rnorm(n * p), nrow = n, ncol = p)
colnames(x_data) <- paste0("V", 1:p)
# Create a response variable y
y_data <- 2 * x_data[, 1] - 1.5 * x_data[, 2] +      # Linear effects
x_data[, 3] * x_data[, 4] +               # Interaction effect
sin(pi * x_data[, 5]) +                   # Non-linear effect
rnorm(n, 0, 0.5)                          # Noise (CORRECTED: using 'n')
# Run the model with parameters suitable for a quick example
model_fit <- main_RECKMON(                          # CORRECTED: Function name
x = x_data,
y = y_data,
poly_features = 5,
step_gaussian = 1,
cv = 3, # Use 3 folds for a quick example
mc.cores = 1
)
# View the selected features
cat("Selected interaction features:\n")
print(model_fit$poly_feature)
cat("Selected Gaussian kernel features:\n")
print(model_fit$gaussian_feature)
str(model_fit)
devtools::document()
devtools::document()
devtools::load_all()
?predict_RECKMON
set.seed(123)
n <- 100
p <- 10
x_data <- matrix(rnorm(n * p), nrow = n, ncol = p)
colnames(x_data) <- paste0("V", 1:p)
# Create a response variable y
y_data <- 2 * x_data[, 1] - 1.5 * x_data[, 2] +      # Linear effects
x_data[, 3] * x_data[, 4] +               # Interaction effect
sin(pi * x_data[, 5]) +                   # Non-linear effect
rnorm(n, 0, 0.5)                          # Noise (CORRECTED: using 'n')
# Run the model with parameters suitable for a quick example
model_fit <- main_RECKMON(                          # CORRECTED: Function name
x = x_data,
y = y_data,
poly_features = 5,
step_gaussian = 1,
cv = 3, # Use 3 folds for a quick example
mc.cores = 1
)
# View the selected features
cat("Selected interaction features:\n")
print(model_fit$poly_feature)
cat("Selected Gaussian kernel features:\n")
print(model_fit$gaussian_feature)
str(model_fit)
predict_RECKMON(newx = rnorm(p), model_fit)
devtools::document()
devtools::load_all()
?predict_RECKMON
predict_RECKMON(newx = rnorm(p), model_fit)
length(model_fit$poly_feature)
model_fit$poly_feature
newx[, model_fit$poly_feature ]^2
newx = rnorm(p)
if(is.vector(newx)) newx = matrix(newx, nrow = 1)
newx[, model_fit$poly_feature ]^2
devtools::document()
devtools::load_all()
?predict_RECKMON
# Predict new observation
predict_RECKMON(newx = rnorm(p), model_fit)
if(is.vector(newx)) newx = matrix(newx, nrow = 1)
x = model_fit$x
y = model_fit$y
n = nrow(x)
newn = nrow(newx)
x_merge = rbind(x, newx)
train_seq = 1:n
if(length(model_fit$theta_hat) == 1){
gaussian_effect_hat = 0
}else{
feature_gaussian = model_fit$gaussian_feature
OmicsKernelMatrix <- vector("list", length = 2)
OmicsKernelMatrix[[1]] <- diag(1, nrow = nrow(x_merge))
OmicsKernelMatrix[[2]] <- kernelMatrix(x_merge[,feature_gaussian], x_merge[,feature_gaussian], kernel = "gaussian", kparam = model_fit$guassian_para)
sigma_Ya = Reduce("+", lapply(1:length(OmicsKernelMatrix), function(i){OmicsKernelMatrix[[i]] * model_fit$theta_hat[i]}))
gaussian_effect_hat = sigma_Ya[-train_seq,train_seq] %*% solve(sigma_Ya[train_seq,train_seq]) %*% model_fit$r2
}
interactions_matrix_test <- model.matrix(~ .^2, data = as.data.frame(newx[, model_fit$poly_feature ]))
interactions_matrix_test <- interactions_matrix_test[,-1]
interactions_matrix_test[,1:length(model_fit$poly_feature)] = newx[, model_fit$poly_feature, drop = F ]^2
interactions_matrix_test[,1:length(model_fit$poly_feature)]
length(model_fit$poly_feature)
interactions_matrix_test
as.data.frame(newx[, model_fit$poly_feature ]
as.data.frame(newx[, model_fit$poly_feature ])
as.data.frame(newx[, model_fit$poly_feature ])
interactions_matrix_test <- model.matrix(~ .^2, data = as.data.frame(newx[, model_fit$poly_feature, drop = F ]))
interactions_matrix_test
interactions_matrix_test <- interactions_matrix_test[,-1]
interactions_matrix_test[,1:length(model_fit$poly_feature)] = newx[, model_fit$poly_feature, drop = F ]^2
interactions_matrix_test <- model.matrix(~ .^2, data = as.data.frame(newx[, model_fit$poly_feature, drop = F ]))
interactions_matrix_test <- interactions_matrix_test[,-1]
interactions_matrix_test[,1:length(model_fit$poly_feature), drop = F ] = newx[, model_fit$poly_feature, drop = F ]^2
interactions_matrix_test[,1:length(model_fit$poly_feature), drop = F ]
1:length(model_fit$poly_feature)
interactions_matrix_test
interactions_matrix_test <- model.matrix(~ .^2, data = as.data.frame(newx[, model_fit$poly_feature, drop = F ]))
interactions_matrix_test <- interactions_matrix_test[,-1, drop = F]
interactions_matrix_test[,1:length(model_fit$poly_feature), drop = F ] = newx[, model_fit$poly_feature, drop = F ]^2
interactions_matrix_test
str(interactions_matrix_test)
interactions_matrix_test[,1:length(model_fit$poly_feature), drop = F ]
newx[, model_fit$poly_feature, drop = F ]^2
interactions_matrix_test[,1:length(model_fit$poly_feature), drop = F ] = newx[, model_fit$poly_feature, drop = F ]^2
interactions_matrix_test[,1:length(model_fit$poly_feature), drop = F ]
str(  interactions_matrix_test[,1:length(model_fit$poly_feature), drop = F ] )
str(newx[, model_fit$poly_feature, drop = F ]^2)
interactions_matrix_test[,1:length(model_fit$poly_feature), drop = F ] = newx[, model_fit$poly_feature, drop = F ]^2
interactions_matrix_test[,1:length(model_fit$poly_feature), drop = F ] = 1:5
interactions_matrix_test[,1:length(model_fit$poly_feature), drop = F ]
str(  interactions_matrix_test[,1:length(model_fit$poly_feature), drop = F ] )
type(  interactions_matrix_test[,1:length(model_fit$poly_feature), drop = F ] )
newx[, model_fit$poly_feature, drop = F ]^2
interactions_matrix_test[,1:length(model_fit$poly_feature), drop = F ]
str(  interactions_matrix_test[,1:length(model_fit$poly_feature), drop = F ] )
interactions_matrix_test
interactions_matrix_test[,1:length(model_fit$poly_feature), drop = F ]
length(model_fit$poly_feature)
interactions_matrix_test[,1:length(model_fit$poly_feature), drop = F ]
interactions_matrix_test[,1:length(model_fit$poly_feature), drop = F ] <- 1:5
str(1:5)
interactions_matrix_test
interactions_matrix_test = matrix(interactions_matrix_test, nrow = 1)
interactions_matrix_test <- interactions_matrix_test[,-1, drop = F]
interactions_matrix_test[,1:length(model_fit$poly_feature), drop = F ] = newx[, model_fit$poly_feature, drop = F ]^2
interactions_matrix_test[,1:length(model_fit$poly_feature)
] = newx[, model_fit$poly_feature, drop = F ]^2
interactions_matrix_test[,1:length(model_fit$poly_feature) ]
interactions_matrix_test <- model.matrix(~ .^2, data = as.data.frame(newx[, model_fit$poly_feature, drop = F ]))
interactions_matrix_test <- interactions_matrix_test[,-1, drop = F]
interactions_matrix_test[,1:length(model_fit$poly_feature) ] = newx[, model_fit$poly_feature, drop = F ]^2
devtools::document()
devtools::load_all()
?predict_RECKMON
# Predict new observation
predict_RECKMON(newx = rnorm(p), model_fit)
# Predict new observation
predict_RECKMON(newx = matrix( rnorm(p*2), nrow = 2), model_fit)
# Predict new observation
predict_RECKMON(newx = matrix( rnorm(p*2), nrow = 2), model_fit)
# Predict new observation
predict_RECKMON(newx = matrix( rnorm(p*2), nrow = 2), model_fit)
# Predict new observation
predict_RECKMON(newx = matrix( rnorm(p*2), nrow = 2), model_fit)
# Predict new observation
predict_RECKMON(newx = matrix( rnorm(p*2), nrow = 2), model_fit)
use_mit_license(copyright_holder = NULL)
usethis::use_mit_license(copyright_holder = NULL)
